import os

# os.environ["R_HOME"] = r"C:\Program Files\R\R-4.3.3"
# os.environ["PATH"] = r"C:\Program Files\R\R-4.3.3\bin\x64" + ";" + os.environ["PATH"]

import rpy2
from rpy2.robjects import pandas2ri, packages
import numpy as np
import pandas as pd
from load_datasets import Dataset
from sklearn.model_selection import train_test_split

pandas2ri.activate()

stats = packages.importr("stats")
base = packages.importr("base")
utils = packages.importr("utils")
utils.chooseCRANmirror(ind=1)

gamens_ = utils.install_packages("GAMens")
gamens = packages.importr("GAMens")
datasets = packages.importr("datasets")

# mtcars = packages.data(datasets).fetch("mtcars")["mtcars"]
# print(mtcars, type(mtcars))

# GAMens_Obj = gamens.GAMens("carb~.", mtcars, 4, autoform=True, iter=10)

# test = stats.predict(GAMens_Obj[0][0], mtcars, type="response")
# print("test:", test)
# print(f"Pred: {GAMens_Obj[9]}")
# print(f"Pred_proba: {GAMens_Obj[8]}")


class GAMens:
    """
    (Documentation generated by ChatGPT based on original documentation.)
    GAMens class represents a Generalized Additive Model (GAM) ensemble.

    Attributes:
        formula (str): A formula, as in the gam function. Smoothing splines are supported as nonparametric
            smoothing terms, indicated by 's'. See the documentation of 's' in the gam package for its arguments.
            The GAMens function also provides the possibility for automatic formula specification.
            See 'details' for more information. To enable automatic formula specification, use the generic formula [response variable name]~.
            in combination with autoform = TRUE.
        data (DataFrame): A data frame in which to interpret the variables named in formula.
        rsm_size (int): An integer, the number of variables to use for random feature subsets used in the
            Random Subspace Method. Default is 2. If rsm=FALSE, the value of rsm_size is ignored.
        autoform (bool): If FALSE (default), the model specification in formula is used.
            If TRUE, the function triggers automatic formula specification. See 'details' for more information.
        num_classifiers (int): Original called "iter" - but this is protected in Python. An integer, the number of base classifiers (GAMs) in the ensemble.
            Defaults to num_classifiers=10 base classifiers.
        df (int): An integer, the number of degrees of freedom (df) used for smoothing spline estimation.
            Its value is only used when autoform = TRUE. Defaults to df=4. Its value is ignored if a formula
            is specified and autoform is FALSE.
        bagging (bool): Enables Bagging if value is TRUE (default). If FALSE, Bagging is disabled.
            Either bagging, rsm, or both should be TRUE.
        rsm (bool): Enables Random Subspace Method (RSM) if value is TRUE (default). If FALSE, RSM is disabled.
            Either bagging, rsm, or both should be TRUE.
        fusion (str): Specifies the fusion rule for the aggregation of member classifier outputs in the ensemble.
            Possible values are 'avgagg' (default), 'majvote', 'w.avgagg', or 'w.majvote'.

    Methods:
        (Include methods if necessary)
    """

    def __init__(
        self,
        autoform=True,  # Default: False, True is used to create the GAM formula automatically
        num_classifiers=10,  # Default: 10, Number of base classifierts (GAMs) in the ensemble
        rsm_size=2,  # Default: 2,
        rsm=True,  # Default: True
        df=4,  # Default: 4, defined degrees of freedome for smoothing spline estimation, is only used with autoform == True
        bagging=True,  # Default: True
        fusion="avgagg",  # Default: avgagg,
    ):
        self.autoform = autoform
        self.num_classifiers = (
            num_classifiers  # use of num_classifier intead of protected "iter"
        )
        self.rsm_size = rsm_size
        self.rsm = rsm
        self.df = df
        self.bagging = bagging
        self.fusion = fusion
        self.model = None

    def fit(self, X, y, column_names: list[str]):
        if self.model is not None:
            raise ValueError("Model was already trained.")

        if self.autoform is False:
            raise ValueError(
                "Python class implementation of GAMens does not support autoform == False as of now."
            )

        if len(np.unique(y)) != 2:
            raise ValueError(
                "Did you try to run a regression task using GAMens? This is not supported."
            )

        # Combine train data with label
        data = np.hstack((X, y[:, np.newaxis]))

        if data.shape[1] != column_names.shape[0]:
            raise ValueError(
                f"There is a mismatch for the train data shape ({data.shape[1]})  and column names shape ({column_names.shape[0]})"
            )
        train_df = pd.DataFrame(data, columns=column_names)
        formula_str = "target~."
        # formula_str = "target~s(Age,4)+s(Bmi, 4)+s(Bp, 4)+s(Tc, 4)+s(Ldl, 4)+s(Hdl, 4)+s(Tch, 4)+s(Ltg, 4)+s(Glu, 4)+Sex"
        pandas2ri.activate()
        self.model = gamens.GAMens(
            formula_str,
            train_df,
            self.rsm_size,
            self.autoform,
            self.num_classifiers,
            self.df,
            self.bagging,
            self.rsm,
            self.fusion,
        )
        pandas2ri.deactivate()

    def predict(self, X):
        # Here I'm not sure if we also should put in the y label
        pandas2ri.activate()
        preds = stats.predict(self.model, X, type="response")
        pandas2ri.deactivate()
        return np.array(preds[1]).astype(np.int32)

    def predict_proba(self, X):
        # Here I'm not sure if we also should put in the y label
        pandas2ri.activate()
        preds = stats.predict(self.model, X, type="response")
        pandas2ri.deactivate()
        return np.array(preds[0]).astype(np.float32)


if __name__ == "__main__":
    from sklearn.metrics import roc_auc_score

    dataset = Dataset("water", "gamens")
    gamens_model = GAMens(num_classifiers=1000)
    X_train, X_val, y_train, y_val = train_test_split(
        dataset.X,
        dataset.y,
        test_size=0.33,
        random_state=1337,
    )
    column_names = np.hstack(
        (dataset.numerical_cols, dataset.categorical_cols, "target")
    )
    gamens_model.fit(X_train, y_train, column_names=column_names)
    preds = gamens_model.predict(X_val)
    print(preds)
    probas = gamens_model.predict_proba(X_val)
    print("ROC AUC SCORE: ", roc_auc_score(y_val, probas))
